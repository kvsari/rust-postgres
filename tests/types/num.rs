extern crate num;

use self::num::rational::BigRational;
use self::num::bigint::{BigInt};
use self::num::traits::{FromPrimitive, Zero};

use types::test_type;

#[test]
fn test_half() {
    let half = BigRational::new(BigInt::from_u64(1).unwrap(),
                                BigInt::from_u64(2).unwrap());
    test_type("NUMERIC", &[(Some(half), "'0.5'"), (None, "NULL")])
}

#[test]
fn test_big() {
    let ratio = BigRational::new(BigInt::parse_bytes(b"21310003213000000001341001231300000032002030201030212312300002132130000000103021400002130121231230000313000003131310000012210000200303001", 10).unwrap(),
                                 BigInt::parse_bytes(b"100000000000000000000000000000000000000000000000000000000000000000", 10).unwrap());
    test_type("NUMERIC", &[(Some(ratio), "'213100032130000000013410012313000000320020302010302123123000021321300000.00103021400002130121231230000313000003131310000012210000200303001'"), (None, "NULL")]);
}

#[test]
fn test_small() {
    let ratio = BigRational::new(BigInt::parse_bytes(b"1002000000000000000000000030000540000080005120000000700409", 10).unwrap(),
                                 BigInt::parse_bytes(b"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", 10).unwrap());
    test_type("NUMERIC", &[(Some(ratio), "'0.0000000000000000000000000000000000000100200000000000000000000003000054000008000512000000070040900000'"), (None, "NULL")]);
}

#[test]
fn test_zero() {
    let zero: BigRational = Zero::zero();
    test_type("NUMERIC", &[(Some(zero), "'0.0'"), (None, "NULL")]);
}

#[test]
fn test_negative() {
    let ratio = BigRational::new(BigInt::parse_bytes(b"-5000003210000001000440000023", 10).unwrap(),
                                 BigInt::parse_bytes(b"1000000000000000000",  10).unwrap());
    test_type("NUMERIC", &[(Some(ratio), "'-5000003210.000001000440000023'"), (None, "NULL")]);
}

#[test]
fn test_third() {  // will fail, arbitrary precision is impossible as a decimal
    let third = BigRational::new(BigInt::from_u64(1).unwrap(),
                                 BigInt::from_u64(3).unwrap());
    test_type("NUMERIC", &[(Some(thirdone, "NULL")]);
}
